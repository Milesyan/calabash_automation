-1915309563115276298
function _fsr_dateMinusDate(date1, date2){ var d1 = new Date(date1 + " 00:00:00 GMT"); var d2 = new Date(date2 + " 00:00:00 GMT"); return Math.round((d1 - d2) / 86400000); } function _fsr_dateToIndex(date) { return _fsr_dateMinusDate(date, "2013/01/01"); } function _fsr_convertDatestrToIndexInPrediction(prediction) { for (var i = 0; i < prediction.length; i++) { for (var key in prediction[i]) { if ('cl' == key || 'ol' == key || 'pl' == key) continue; else if (prediction[i][key]) prediction[i][key] = _fsr_dateToIndex(prediction[i][key]); } } return prediction; } function scoresInWindow() { return [7.4, 7.6, 7.8, 9, 11, 15, 27, 33, 22, 8]; } function scoreInPeriod() { return 1; } function scoreInNormal() { return 3; } function _getScoreConsideringAge(score, age) { if (age < 27) return score; var scoreForOver27 = -0.0019 * age * age + 0.0933 * age - 0.1374; scoreForOver27 *= score; return scoreForOver27 < 1 ? 1 : scoreForOver27; } function getScoreConsideringAge(score, momAge, hasPartner, partnerAge) { return _getScoreConsideringAge(score, momAge); } function _calculateFertileScores(predictionWithDatalabel, momAge) { var prediction = _fsr_convertDatestrToIndexInPrediction(predictionWithDatalabel); var result = []; var normalScore = _getScoreConsideringAge(scoreInNormal(), momAge); var periodScore = _getScoreConsideringAge(scoreInPeriod(), momAge); var windowScores = scoresInWindow(); for (var i = 0; i < windowScores.length; i++) { windowScores[i] = _getScoreConsideringAge(windowScores[i], momAge); } var resultScore = []; for (var i = 0; i < prediction.length; i++) { var pN = prediction[i]; var pbN = pN['pb']; var peN = pN['pe']; var fbN = pN['fb']; var feN = pN['fe']; var ovN = pN['ov']; for (var j = pbN; j <= peN; j++) { result.push(periodScore); } for (var j = peN + 1; j < fbN; j++) { if (j - ovN >= -8) { result.push(windowScores[j - ovN + 8]); } else { result.push(normalScore); } } for (var j = fbN; j <= feN; j++) { var diffFromOv = j - ovN; if (diffFromOv >= -8 && diffFromOv <= 1) { result.push(windowScores[j - ovN + 8]); } else { result.push(normalScore); } } var cycleEnd = i == prediction.length - 1 ? pbN + pN['cl'] : prediction[i+1]['pb']; for (var j = feN + 1; j < cycleEnd; j++) { result.push(normalScore); } } return result; } function calculateFertileScores(prediction, momAge, hasPartner, partnerAge) { return _calculateFertileScores(prediction, momAge); } if (typeof exports == "undefined") exports = {}; exports.Calculator = function (){ this.calculateFertileScores = calculateFertileScores; this.getScoreConsideringAge = getScoreConsideringAge; return this; }; 
