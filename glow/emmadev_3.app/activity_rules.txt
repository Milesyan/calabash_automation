-4394188183635176431
 active = {}; active.DAY_TYPE_NORMAL = 1; active.DAY_TYPE_FW = 2; active.DAY_TYPE_PERIOD = 3; active.SCORE_SDFW = { 'intercourse': 10, 'orgasm': 1 }; active.SCORE_DAILYDATA = { 'intercourse': 4, 'orgasm': 1, 'cervical_mucus': 10, 'temperature': 4, 'ovulation_test': 2, 'cervical': 1, 'exercise': 1, 'smoke': 1, 'alcohol': 1 }; /* NOTE that we should define the level and score-level here since it may be changed. Without this file, we should never design the "score-level" variable */ active.level = (function() { var self = {}; self.INACTIVE = 1; self.OCCASIONALLY_ACTIVE = 2; self.MODERATELY_ACTIVE = 3; self.VERY_ACTIVE = 4; self.MAX_INACTIVE = 0.06; self.MAX_OCCASIONALLY = 0.15; self.MAX_MODERATELY = 0.45; self.MAX_VERY_ACTIVE = 1; self.getLevel = function(s) { if (s < self.MAX_INACTIVE) { return self.INACTIVE; } else if (s < self.MAX_OCCASIONALLY) { return self.OCCASIONALLY_ACTIVE; } else if (s < self.MAX_MODERATELY) { return self.MODERATELY_ACTIVE; } else { return self.VERY_ACTIVE; } }; return self; })(); active.day = (function() { var self = {}; self._fullScore = function(dict) { var s = 0; for (var k in dict) { s += dict[k]; } return s; }; self.f_SDFW = self._fullScore(active.SCORE_SDFW); self.f_DL = self._fullScore(active.SCORE_DAILYDATA); self.f_DT = 5; return self; })(); dateString = (function() { var self = {}; self.dayTime = 86400000; self.toString = function(dateObj) { return "" + dateObj.getFullYear() + "/" + ("0" + (dateObj.getMonth() + 1)).slice(-2) + "/" + ("0" + dateObj.getDate()).slice(-2); }; self.toDateObj = function(str) { return new Date(Date.parse(str)); }; self.toTimestamp = function(strOrObj) { if (typeof(strOrObj) == "string") { return Date.parse(strOrObj); } else { return strOrObj.getTime(); } }; self.plus = function(str, length) { if (length == 0) { return str; } return self.toString(new Date(Date.parse(str) + length * self.dayTime)); }; self.minus = function(str, length) { return self.plus(str, -1 * length); }; self.minusDate = function(str1, str2) { return ((Date.parse(str1) - Date.parse(str2)) / self.dayTime); }; self.isEarlier = function(str1, str2) { return self.minusDate(str1, str2) < 0; }; return self; })(); function dailyTodoScore(indices) { var result = 0; for (var idx in indices) { result += 1; } return result; } function dailyScore(dayType, dailyData, dailyTodo) { var s_SDFW = 0; var s_DL = 0; var s_DT = 0; var scoreDL = active.SCORE_DAILYDATA; if (dailyData) { var tmp = dailyData['intercourse']; if ((tmp) && (tmp != 1)) { s_DL += scoreDL['intercourse']; if ((dayType == active.DAY_TYPE_FW) && (tmp != 1)) { s_SDFW += active.SCORE_SDFW['intercourse']; } if (((tmp & 0x10) > 0) || ((tmp & 0x20) > 0)) { s_DL += scoreDL['orgasm']; if ((dayType == active.DAY_TYPE_FW) && (tmp != 1)) { s_SDFW += active.SCORE_SDFW['orgasm']; } } } for (var k in scoreDL) { if ((k=='intercourse') || (k=='orgasm')) { continue; } if ((k == 'cervical_mucus') && (dailyData[k])) { if (dailyData[k] != 1) { s_DL += scoreDL[k]; } } else if (dailyData[k]) { s_DL += scoreDL[k]; } } } if (dailyTodo) { donesArray = JSON.parse(dailyTodo['serialized_dones']); s_DT = dailyTodoScore(donesArray); } return [s_SDFW, s_DL, s_DT]; } function durationScore(startDate, endDate, pArray, dailyDataArray, dailyTodoArray) { var days = dateString.minusDate(endDate, startDate) + 1; var p = 0; var j = 0; var t = 0; var maxp = pArray.length; var maxj = dailyDataArray.length; var maxt = dailyTodoArray.length; var result = []; for (var i = 0; i < days; i++) { var currentDay = dateString.plus(startDate, i); f_SDFW = 0; f_DL = active.day.f_DL; var dailyData = null; while (j<maxj) { if (dailyDataArray[j]['date'] == currentDay) { dailyData = dailyDataArray[j]; j += 1; break; } else if (dateString.isEarlier(currentDay, dailyDataArray[j]['date'])) { break; } else { j += 1; } } var dailyTodo = null; while (t<maxt) { if (dailyTodoArray[t]['date'] == currentDay) { dailyTodo = dailyTodoArray[t]; t += 1; break; } else if (dateString.isEarlier(currentDay, dailyTodoArray[t]['date'])) { break; } else { t += 1; } } var dayType = active.DAY_TYPE_NORMAL; while (p<maxp) { fb = pArray[p]['fb']; fe = pArray[p]['fe']; if (dateString.isEarlier(currentDay, fb)) { break; } else if (dateString.isEarlier(fe, currentDay)) { p += 1; } else { dayType = active.DAY_TYPE_FW; f_SDFW = active.day.f_SDFW; break; } } var r = dailyScore(dayType, dailyData, dailyTodo); s_SDFW = r[0]; s_DL = r[1]; s_DT = r[2]; f_DT = 0; if (dailyTodo) { todosArray = JSON.parse(dailyTodo['serialized_todos']); f_DT = dailyTodoScore(todosArray); } result.push({ 's_SDFW': s_SDFW, 'f_SDFW': f_SDFW, 's_DL': s_DL, 'f_DL': f_DL, 's_DT': s_DT, 'f_DT': f_DT }); } var total_s_SDFW = 0; var total_f_SDFW = 0; var total_s_ee = 0; var total_f_ee = 0; for (var i = 0; i < result.length; i++) { var r = result[i]; total_s_SDFW += r['s_SDFW']; total_f_SDFW += r['f_SDFW']; total_s_ee += r['s_DL'] + r['s_DT']; total_f_ee += r['f_DL'] + r['f_DT']; } var score1 = total_f_SDFW ? (total_s_SDFW / total_f_SDFW) : 0; var score2 = total_f_ee ? (total_s_ee / total_f_ee) : 0; return { 'SWDF': score1, 'EE': score2 } } function combinedScore(SWDF, EE) { var s = SWDF + (1-SWDF) * EE * 3; return s > 1 ? 1 : s; } function getActivity(startDate, endDate, pArray, dailyDataArray, dailyTodoArray) { scores = durationScore(startDate, endDate, pArray, dailyDataArray, dailyTodoArray); finalScore = combinedScore(scores['SWDF'], scores['EE']); level = active.level.getLevel(finalScore); return { 'score': finalScore, 'level': level } } activeTest = {}; activeTest.dailyDataArray = [ { 'date': '2013/05/27', 'temperature': '40', 'intercourse': 1, 'ovulation_test': 1 }, { 'date': '2013/05/29', 'cervical_mucus': 512 }, { 'date': '2013/05/31', 'intercourse': 0x11 } ]; activeTest.dailyTodoArray = [ { 'date': '2013/05/26', 'serialized_todos': JSON.stringify([0, 37, 94]), 'serialized_dones': JSON.stringify([0, 37, 94]) }, { 'date': '2013/05/29', 'serialized_todos': JSON.stringify([20, 42, 128, 36]), 'serialized_dones': JSON.stringify([]) }, { 'date': '2013/05/31', 'serialized_todos': JSON.stringify([]), 'serialized_dones': JSON.stringify([]) } ]; activeTest.startDate = '2013/05/26'; activeTest.endDate = '2013/06/01'; activeTest.pArray = [ { 'fb': '2013/05/28', 'fe': '2013/05/31' } ]; activeTest.func = function() { return getActivity(activeTest.startDate, activeTest.endDate, activeTest.pArray, activeTest.dailyDataArray, activeTest.dailyTodoArray); }; if (typeof exports == "undefined") { exports = {}; } exports.Activity= function (){ this.getActivity = getActivity; this.activeTest = activeTest; return this; }; 
